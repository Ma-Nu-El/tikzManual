:PROPERTIES:
:ID:       b2d46c8e-2062-40ee-ba7d-651bc59d9bfb
:END:
#+INCLUDE: "config.org"
#+subtitle: Tutorial: A Lecture Map for Johannes
# #+LATEX_HEADER: \usetikzlibrary{calendar,mindmap,backgrounds,trees}

# The file:
# - [[file:~/myDrive/org/pgfmanual.pdf]]
# - [[file:~/myDrive/org/pgfmanual.pdf::80]]

* TOC :TOC_1:noexport:
- [[#canceled-template-break][Canceled: template break.]]
- [[#tutorial-tutorial-a-lecture-map-for-johannes][Tutorial: Tutorial: A Lecture Map for Johannes]]
- [[#problem-statement][Problem Statement]]
- [[#introduction-to-trees][Introduction to Trees]]

* Canceled: template break.
- https://tex.stackexchange.com/questions/390683/why-should-you-avoid-using-complex-templates
- It was an issue in previous tutorial, but now the situation got even worse.
- I'm going to skip this one and jump to the next part.
* Tutorial: Tutorial: A Lecture Map for Johannes
# - [[file:~/myDrive/org/pgfmanual.pdf::80]]

In this tutorial we explore the tree and mind map mechanisms of TikZ.

Johannes is quite excited: For the first time he will be teaching a course
all by himself during the upcoming semester! Unfortunately, the course is not
on his favorite subject, which is of course Theoretical Immunology, but on
Complexity Theory, but as a young academic Johannes is not likely to complain
too loudly. In order to help the students get a general overview of what is
going to happen during the course as a whole, he intends to draw some kind of
tree or graph containing the basic concepts. He got this idea from his old
professor who seems to be using these “lecture maps” with some success.
Independently of the success of these maps, Johannes thinks they look
quite neat.


* Problem Statement
# - [[file:~/myDrive/org/pgfmanual.pdf::80]]


Johannes wishes to create a lecture map with the following features:

1. It should contain a tree or graph depicting the main concepts.
2. It should somehow visualize the different lectures that will be taught.
   Note that the lectures are not necessarily the same as the concepts since
   the graph may contain more concepts than will be addressed in lectures
   and some concepts may be addressed during more than one lecture.
3. The map should also contain a calendar showing when the individual
   lectures will be given.
4. The aesthetical reasons, the whole map should have a visually nice
   and information-rich background.


As always, Johannes will have to include the right libraries and set up the
environment. Johannes is going to use the =mindmap= library and since he
wishes to show a =calendar=, he will also need the calendar library.
In order to put something on a background layer, it seems like a good
idea to also include the =backgrounds= library.

* Introduction to Trees
# - [[file:~/myDrive/org/pgfmanual.pdf::80]]

The first choice Johannes must make is whether he will organize the concepts
as a tree, with root concepts and concept branches and leaf concepts, or as
a general graph. The tree implicitly organizes the concepts, while a graph
is more flexible. Johannes decides to compromise: Basically, the concepts
will be organized as a tree. However, he will selectively add connections
between concepts that are related, but which appear on different levels
or branches of the tree.

Johannes starts with a tree-like list of concepts that he feels are
important in Computational Complexity:

- Computational Problems
  + Problem Measures
  + Problem Aspects
  + Problem Domains
  + Key Problems
- Computational Models
  + Turing Machines
  + Random-Access Machines
  + Circuits
  + Binary Decision Diagrams
  + Oracle Machines
  + Programming in Logic
- Measuring Complexity
  + Complexity Measures
  + Classifying Complexity
  + Comparing Complexity
  + Describing Complexity
- Solving Problems
  + Exact Algorithms
  + Randomization
  + Fixed-Parameter Algorithms
  + Parallel Computation
  + Partial Solutions
  + Approximation


Johannes will surely need to modify this list later on, but it looks good
as a first approximation. He will also need to add a number of subtopics
(like /lots/ of complexity classes under the topic “classifying complexity”),
but he will do this as he constructs the map.

Turning the list of topics into a TikZ-tree is easy, in principle. The basic
idea is that a node can have /children/, which in turn can have children of
their own, and so on. To add a child to a node, Johannes can simply write

=child= ={= {{{lele(node)}}} =}=

right after a node. The

{{{lele(node)}}}

should, in turn, be the code for creating a node. To add another node,
Johannes can use =child= once more, and so on. Johannes is eager to try
out this construct and writes down the following:


#+begin_export latex
\tikz
\node {Computational Complexity} % root
child { node {Computational Problems}
child { node {Problem Measures} }
child { node {Problem Aspects} }
child { node {Problem Domains} }
child { node {Key Problems} }
}
child { node {Computational Models}
child { node {Turing Machines} }
child { node {Random-Access Machines} }
child { node {Circuits} }
child { node {Binary Decision Diagrams} }
child { node {Oracle Machines} }
child { node {Programming in Logic} }
}
child { node {Measuring Complexity}
child { node {Complexity Measures} }
child { node {Classifying Complexity} }
child { node {Comparing Complexity} }
child { node {Describing Complexity} }
}
child { node {Solving Problems}
child { node {Exact Algorithms} }
child { node {Randomization} }
child { node {Fixed-Parameter Algorithms} }
child { node {Parallel Computation} }
child { node {Partial Solutions} }
child { node {Approximation} }
};
#+end_export

#+begin_example latex
\tikz
\node {Computational Complexity} % root
child { node {Computational Problems}
child { node {Problem Measures} }
child { node {Problem Aspects} }
child { node {Problem Domains} }
child { node {Key Problems} }
}
child { node {Computational Models}
child { node {Turing Machines} }
child { node {Random-Access Machines} }
child { node {Circuits} }
child { node {Binary Decision Diagrams} }
child { node {Oracle Machines} }
child { node {Programming in Logic} }
}
child { node {Measuring Complexity}
child { node {Complexity Measures} }
child { node {Classifying Complexity} }
child { node {Comparing Complexity} }
child { node {Describing Complexity} }
}
child { node {Solving Problems}
child { node {Exact Algorithms} }
child { node {Randomization} }
child { node {Fixed-Parameter Algorithms} }
child { node {Parallel Computation} }
child { node {Partial Solutions} }
child { node {Approximation} }
};
#+end_example

Well, that did not quite work out as expected (although, what, exactly,
did one expect?). There are two problems:



1. The overlap of the nodes is due to the fact that TikZ is not particularly
   smart when it comes to placing child nodes. Even though it is possible to
   configure TikZ to use rather clever placement methods, TikZ has no way of
   taking the actual size of the child nodes into account. This may seem
   strange but the reason is that the child nodes are rendered and placed
   one at a time, so the size of the last node is not known when the first
   node is being processed. In essence, you have to specify appropriate
   level and sibling node spacings “by hand”.
2. The standard computer-science-top-down rendering of a tree is rather
   ill-suited to visualizing the concepts. It would be better to either
   rotate the map by ninety degrees or, even better, to use some sort of
   circular arrangement.


Johannes redraws the tree, but this time with some more appropriate options
set, which he found more or less by trial-and-error:


#+begin_export latex
\tikz [font=\footnotesize,
grow=right, level 1/.style={sibling distance=6em},
            level 2/.style={sibling distance=1em}, level distance=5cm]
\node {Computational Complexity} % root
child { node {Computational Problems}
child { node {Problem Measures} }
child { node {Problem Aspects} }
child { node {Problem Domains} }
child { node {Key Problems} }
}
child { node {Computational Models}
child { node {Turing Machines} }
child { node {Random-Access Machines} }
child { node {Circuits} }
child { node {Binary Decision Diagrams} }
child { node {Oracle Machines} }
child { node {Programming in Logic} }
}
child { node {Measuring Complexity}
child { node {Complexity Measures} }
child { node {Classifying Complexity} }
child { node {Comparing Complexity} }
child { node {Describing Complexity} }
}
child { node {Solving Problems}
child { node {Exact Algorithms} }
child { node {Randomization} }
child { node {Fixed-Parameter Algorithms} }
child { node {Parallel Computation} }
child { node {Partial Solutions} }
child { node {Approximation} }
};
#+end_export

#+begin_example latex
\tikz [font=\footnotesize,
  grow=right, level 1/.style={sibling distance=6em},
              level 2/.style={sibling distance=1em}, level distance=5cm]
\node {Computational Complexity} % root
  child { node {Computational Problems}
  child { node {Problem Measures} }
  child { node {Problem Aspects} }
  ... % as before
#+end_example

Still not quite what Johannes had in mind, but he is getting somewhere.

Still not quite what Johannes had in mind, but he is getting somewhere.

For configuring the tree, two parameters are of particular importance:
The =level distance= tells TikZ the distance between (the centers of) the
nodes on adjacent levels or layers of a tree. The =sibling distance= is,
as the name suggests, the distance between (the centers of) siblings of
the tree.


You can globally set these parameters for a tree by simply setting them
somewhere before the tree starts, but you will typically wish them to be
different for different levels of the tree. In this case, you should set
styles like =level 1= or =level 2=. For the first level of the tree, the
=level 1= style is used, for the second level the =level 2= style, and so on.
You can also set the sibling and level distances only for certain nodes by
passing these options to the =child= command as options. (Note that the
options of a =node= command are local to the node and have no effect on the
children. Also note that it is possible to specify options that do have an
effect on the children. Finally note that specifying options for children “at
the right place” is an arcane art and you should peruse Section 21.4 on a
rainy Sunday afternoon, if you are really interested.)


The =grow= key is used to configure the direction in which a tree grows.
You can change growth direction “in the middle of a tree” simply by
changing this key for a single child or a whole level. By including the
=trees= library you also get access to additional growth strategies such as
a “circular” growth:

#+begin_export latex
\tikz [text width=2.7cm, align=flush center,
grow cyclic,
level 1/.style={level distance=2.5cm,sibling angle=90},
level 2/.style={text width=2cm, font=\footnotesize, level distance=3cm,sibling angle=30}]
\node [\font=\bfseries]{Computational Complexity} % root
child { node {Computational Problems}
child { node {Problem Measures} }
child { node {Problem Aspects} }
child { node {Problem Domains} }
child { node {Key Problems} }
}
child { node {Computational Models}
child { node {Turing Machines} }
child { node {Random-Access Machines} }
child { node {Circuits} }
child { node {Binary Decision Diagrams} }
child { node {Oracle Machines} }
child { node {Programming in Logic} }
}
child { node {Measuring Complexity}
child { node {Complexity Measures} }
child { node {Classifying Complexity} }
child { node {Comparing Complexity} }
child { node {Describing Complexity} }
}
child { node {Solving Problems}
child { node {Exact Algorithms} }
child { node {Randomization} }
child { node {Fixed-Parameter Algorithms} }
child { node {Parallel Computation} }
child { node {Partial Solutions} }
child { node {Approximation} }
};
#+end_export

#+begin_example latex
\tikz [text width=2.7cm, align=flush center,
grow cyclic,
level 1/.style={level distance=2.5cm,sibling angle=90},
level 2/.style={text width=2cm, font=\footnotesize, level distance=3cm,sibling angle=30}]
\node[font=\bfseries] {Computational Complexity} % root
  child { node {Computational Problems}
  child { node {Problem Measures} }
  child { node {Problem Aspects} }
  ... % as before
#+end_example

#+begin_export latex
\tikz [mindmap, every node/.style=concept, concept color=black!20,
grow cyclic,
level 1/.append style={level distance=4.5cm,sibling angle=90},
level 2/.append style={level distance=3cm,sibling angle=45}]
\node [root concept] {Computational Complexity} % root
child { node {Computational Problems}
child { node {Problem Measures} }
child { node {Problem Aspects} }
};
#+end_export

#+begin_example latex
#+end_example


#+begin_export latex
\def\lecture#1#2#3#4#5#6{
% As before:
\node [annotation, #3, scale=0.65, text width=4cm, inner sep=2mm, fill=white] at (#4) {
Lecture #1: \textcolor{orange}{\textbf{#2}}
\list{--}{\topsep=2pt\itemsep=0pt\parsep=0pt
\parskip=0pt\labelwidth=8pt\leftmargin=8pt
\itemindent=0pt\labelsep=2pt}
#5
\endlist
};
% New:
\node [anchor=base west] at (cal-#6.base east) {\textcolor{orange}{\textbf{#2}}};
}
\noindent
\begin{tikzpicture}
\begin{scope}[
mindmap,
every node/.style={concept, circular drop shadow,execute at begin node=\hskip0pt},
root concept/.append style={
concept color=black,
fill=white, line width=1ex,
text=black, font=\large\scshape},
text=white,
computational problems/.style={concept color=red,faded/.style={concept color=red!50}},
computational models/.style={concept color=blue,faded/.style={concept color=blue!50}},
measuring complexity/.style={concept color=orange,faded/.style={concept color=orange!50}},
solving problems/.style={concept color=green!50!black,faded/.style={concept color=green!50!black!50}},
grow cyclic,
level 1/.append style={level distance=4.5cm,sibling angle=90,font=\scshape},
level 2/.append style={level distance=3cm,sibling angle=45,font=\scriptsize}]
\node [root concept] (Computational Complexity) {Computational Complexity} % root
child [computational problems] { node [yshift=-1cm] (Computational Problems) {Computational Problems}
child
{ node (Problem Measures) {Problem Measures} }
child
{ node (Problem Aspects) {Problem Aspects} }
child [faded] { node (problem Domains) {Problem Domains} }
child
{ node (Key Problems) {Key Problems} }
}
child [computational models] { node [yshift=-1cm] (Computational Models) {Computational Models}
child
{ node (Turing Machines) {Turing Machines} }
child [faded] { node (Random-Access Machines) {Random-Access Machines} }
child
{ node (Circuits) {Circuits} }
child [faded] { node (Binary Decision Diagrams) {Binary Decision Diagrams} }
child
{ node (Oracle Machines) {Oracle Machines} }
child
{ node (Programming in Logic) {Programming in Logic} }
}
child [measuring complexity] { node [yshift=1cm] (Measuring Complexity) {Measuring Complexity}
child
{ node (Complexity Measures) {Complexity Measures} }
child
{ node (Classifying Complexity) {Classifying Complexity} }
child
{ node (Comparing Complexity) {Comparing Complexity} }
child [faded] { node (Describing Complexity) {Describing Complexity} }
}
child [solving problems] { node [yshift=1cm] (Solving Problems) {Solving Problems}
child
{ node (Exact Algorithms) {Exact Algorithms} }
child
{ node (Randomization) {Randomization} }
child
{ node (Fixed-Parameter Algorithms) {Fixed-Parameter Algorithms} }
child
{ node (Parallel Computation) {Parallel Computation} }
child
{ node (Partial Solutions) {Partial Solutions} }
child
{ node (Approximation) {Approximation} }
};
\end{scope}
\tiny
\calendar [day list downward,
month text=\%mt\ \%y0,
month yshift=3.5em,
name=cal,
at={(-.5\textwidth-5mm,.5\textheight-1cm)},
dates=2009-04-01 to 2009-06-last]
if (weekend)
[black!25]
if (day of month=1) {
\node at (0pt,1.5em) [anchor=base west] {\small\tikzmonthtext};
};
\lecture{1}{Computational Problems}{above,xshift=-5mm,yshift=5mm}{Computational Problems.north}{
\item Knowledge of several key problems
\item Knowledge of problem encodings
\item Being able to formalize problems
}{2009-04-08}
\lecture{2}{Computational Models}{above left}
{Computational Models.west}{
\item Knowledge of Turing machines
\item Being able to compare the computational power of different
models
}{2009-04-15}
\begin{pgfonlayer}{background}
\clip[xshift=-1cm] (-.5\textwidth,-.5\textheight) rectangle ++(\textwidth,\textheight);
\colorlet{upperleft}{green!50!black!25}
\colorlet{upperright}{orange!25}
\colorlet{lowerleft}{red!25}
\colorlet{lowerright}{blue!25}
% The large rectangles:
\fill [upperleft] (Computational
\fill [upperright] (Computational
\fill [lowerleft] (Computational
\fill [lowerright] (Computational
Complexity)
Complexity)
Complexity)
Complexity)
rectangle
rectangle
rectangle
rectangle
++(-20,20);
++(20,20);
++(-20,-20);
++(20,-20);
% The shadings:
\shade [left color=upperleft,right color=upperright]
([xshift=-1cm]Computational Complexity) rectangle ++(2,20);
\shade [left color=lowerleft,right color=lowerright]
([xshift=-1cm]Computational Complexity) rectangle ++(2,-20);
\shade [top color=upperleft,bottom color=lowerleft]
([yshift=-1cm]Computational Complexity) rectangle ++(-20,2);
\shade [top color=upperright,bottom color=lowerright]
([yshift=-1cm]Computational Complexity) rectangle ++(20,2);
\end{pgfonlayer}
\end{tikzpicture}
#+end_export
